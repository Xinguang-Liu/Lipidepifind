browsable(
tagList(
tags$div(id="app-2",
tags$span(
"v-bind:title" = "message",
"Hover your mouse over me for a few seconds to see my dynamically bound title!"
)
),
vue(
list(
el = "#app-2",
data = list(
message =  htmlwidgets::JS(
"'You loaded this page on ' + new Date()"
)
)
)
)
)
)
browsable(
tagList(
tags$div(id="app-2",
tags$span(
"v-bind:title" = "message",
"Hover your mouse over me for a few seconds to see my dynamically bound title!"
)
),
vue3(
list(
el = "#app-2",
# vue 3 is more burdensome but robust requiring data as function
#   if data is not a function then widget will auto-convert
data = htmlwidgets::JS("
function() {
return {message: 'You loaded this page on ' + new Date()}
}
")
)
)
)
)
browsable(
tagList(
tags$div(id="app-3",
tags$p("v-if"="seen", "Now you see me")
),
vue3(
list(
el = '#app-3',
data = list(seen = TRUE),
# data = htmlwidgets::JS("function() {return {seen: true}}"),
mounted = htmlwidgets::JS("
function() {
var that = this;
setInterval(function(){that.seen=!that.seen},1000);
}
")
)
)
)
)
library(shiny)
ui <- fluidPage(
tagList(
tags$div(id="app","{{message}}"),
tags$script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
),
html_dependency_vue()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
tagList(
tags$div(id="app","{{message}}"),
tags$script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
),
# html_dependency_vue()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp('vueR.R')
tagList(
tags$div(id="app","{{message}}"),
tags$script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
)
library(shiny)
ui <- fluidPage(
tagList(
tags$div(id="app","{{message}}"),
tags$button(id = "btn", "{{message}}"),
tags$script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
),
html_dependency_vue()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
tagList(
tags$div(id="app","{{message}}"),
tags$button(id = "btn", "{{message}}"),
tags$script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
)
library(shiny)
ui <- fluidPage(
tagList(
tags$div(id="app","{{message}}",tags$button(id = "btn", "{{message}}")),
tags$script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
),
html_dependency_vue()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
html_dependency_vue
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css")
tags$script(src="https://unpkg.com/element-ui/lib/index.js")
tagList(
div(
id="app",
"{{message}}",
button(id = "btn", "{{message}}")
),
script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
)
library(vueR)
library(htmltools)
tagList(
div(
id="app",
"{{message}}",
button(id = "btn", "{{message}}")
),
script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
)
tagList(
div(
id="app",
"{{message}}",
tags$button(id = "btn", "{{message}}")
),
script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
)
tagList(
div(
id="app",
"{{message}}",
tags$button(id = "btn", "{{message}}")
),
tags$script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
)
tagList(
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"),
tags$script(src="https://unpkg.com/element-ui/lib/index.js"),
div(
id="app",
"{{message}}",
tags$button(id = "btn", "{{message}}")
),
tags$script(
"
var app = new Vue({
el: '#app',
data: {
message: 'Hello Vue!'
}
});
"
)
)
HTML('<el-button @click="visible = true">Button</el-button>')
tagList(
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"),
tags$script(src="https://unpkg.com/element-ui/lib/index.js"),
HTML('<el-button @click="visible = true">Button</el-button>'),
HTML('<el-dialog :visible.sync="visible" title="Hello world">
<p>Try Element</p>
</el-dialog>'),
div(
id="app",
"{{message}}",
tags$button(id = "btn", "{{message}}")
),
tags$script(
"
new Vue({
el: '#app',
data: function() {
return { visible: false }
}
})
"
)
)
tagList(
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"),
tags$script(src="https://unpkg.com/element-ui/lib/index.js"),
div(
id="app",
HTML('<el-button @click="visible = true">Button</el-button>'),
HTML('<el-dialog :visible.sync="visible" title="Hello world">
<p>Try Element</p>
</el-dialog>'),
),
tags$script(
"
new Vue({
el: '#app',
data: function() {
return { visible: false }
}
})
"
)
)
library(vueR)
library(htmltools)
ui <- fluidPage(
tagList(
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"),
tags$script(src="https://unpkg.com/element-ui/lib/index.js"),
div(
id="app",
HTML('<el-button @click="visible = true">Button</el-button>'),
HTML('<el-dialog :visible.sync="visible" title="Hello world">
<p>Try Element</p>
</el-dialog>'),
),
tags$script(
"
new Vue({
el: '#app',
data: function() {
return { visible: false }
}
})
"
)
),
html_dependency_vue()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(vueR)
library(htmltools)
ui <- fluidPage(
tagList(
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"),
tags$script(src="https://unpkg.com/element-ui/lib/index.js"),
div(
id="app",
HTML('<el-button @click="visible = true">Button</el-button>'),
HTML('<el-dialog :visible.sync="visible" title="Hello world">
<p>Try Element</p>
</el-dialog>'),
),
tags$script(
"
new Vue({
el: '#app',
data: function() {
return { visible: false }
}
})
"
)
),
html_dependency_vue()
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
tags$script
tag
tag("script", contents, .noWS = .noWS, .renderHook = .renderHook)
tag("script")
tag("script","test")
tag("el-button","test")
tags$button()
tags$button
tags$div
library(vueR)
library(htmltools)
ui <- fluidPage(
tagList(
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"),
tags$script(src="https://unpkg.com/element-ui/lib/index.js"),
div(
id="app",
HTML('<el-button @click="visible = true">Button</el-button>'),
HTML('<el-dialog :visible.sync="visible" title="Hello world">
<p>Try Element</p>
</el-dialog>'),
),
tags$script(
"
new Vue({
el: '#app',
data: function() {
return { visible: false }
}
})
"
)
),
html_dependency_vue()
)
server <- function(input, output, session) {
observe(
print(input$app)
)
}
shinyApp(ui, server)
library(vueR)
library(htmltools)
ui <- fluidPage(
tagList(
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"),
tags$script(src="https://unpkg.com/element-ui/lib/index.js"),
div(
id="app",
HTML('<el-button @click="visible = true">Button</el-button>'),
HTML('<el-dialog :visible.sync="visible" title="Hello world">
<p>Try Element</p>
</el-dialog>'),
),
tags$script(
"
new Vue({
el: '#app',
data: function() {
return { visible: false }
}
})
"
)
),
html_dependency_vue()
)
server <- function(input, output, session) {
observe(
print(input$app)
)
}
shinyApp(ui, server)
library(vueR)
library(htmltools)
ui <- fluidPage(
tagList(
tags$link(rel="stylesheet", href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"),
tags$script(src="https://unpkg.com/element-ui/lib/index.js"),
div(
id="app",
HTML('<el-button @click="visible = true" id ="btn">Button</el-button>'),
HTML('<el-dialog :visible.sync="visible" title="Hello world">
<p>Try Element</p>
</el-dialog>'),
),
tags$script(
"
new Vue({
el: '#app',
data: function() {
return { visible: false }
}
})
"
)
),
html_dependency_vue()
)
server <- function(input, output, session) {
observe(
print(input$btn)
)
}
shinyApp(ui, server)
shiny::runApp()
getwd()
runApp()
?phyper
runApp()
setwd("F:/Computer/E/taobao/20240528shinyapp/package_github/Lipidepifind")
# 激活R文件夹内的所有函数，供测试使用
devtools::load_all()
# x_value <- read_excel("inst/extdata/Number of lipid metabolites identified by metabolic reaction (x value).xlsx")
x_value <- read_excel("data/Number of lipid metabolites identified by metabolic reaction-NEW.xlsx")
saveRDS(x_value,"data/x_value.rds")
# x_value <- read_excel("inst/extdata/Number of lipid metabolites identified by metabolic reaction (x value).xlsx")
x_value <- read_excel("inst/extdata/Number of lipid metabolites identified by metabolic reaction-NEW.xlsx")
saveRDS(x_value,"data/x_value.rds")
x_value
sum(x_value$x)
# 激活R文件夹内的所有函数，供测试使用
devtools::load_all()
# x_value <- read_excel("inst/extdata/Number of lipid metabolites identified by metabolic reaction (x value).xlsx")
x_value <- read_excel("inst/extdata/Number of lipid metabolites identified by metabolic reaction-NEW.xlsx")
saveRDS(x_value,"data/x_value.rds")
x_value
data1 <- read_xlsx("inst/extdata/Parent lipids.xlsx") %>% as.data.table()
data2 <- read_xlsx("inst/extdata/Epireactions.xlsx") %>% as.data.table()
data3 <- read_xlsx("inst/extdata/Allfeatures dataset.xlsx") %>% as.data.table()
# x_value <- read_excel("inst/extdata/Number of lipid metabolites identified by metabolic reaction (x value).xlsx")
x_value <- read_excel("inst/extdata/Number of lipid metabolites identified by metabolic reaction-NEW.xlsx")
result <- read_excel("inst/extdata/result.xlsx")
get_metabolite_mz_predictor(data1,data2,data3,engine = "sqlite")
# 为所有函数在man文件夹(如果没有，会创建)下逐一自动建立Rd文档，以及更新NAMESPCAE文档
devtools::document()
# 如果没有依赖到别的具有不同版权的第三方包的话，一般选择最为广泛使用的 MIT 即可
usethis::use_mit_license()
devtools::check()
usethis::use_data(result)
usethis::use_data(x_value)
x_value
sum(x_value$x)
usethis::use_data(x_value)
devtools::document()
devtools::check()
