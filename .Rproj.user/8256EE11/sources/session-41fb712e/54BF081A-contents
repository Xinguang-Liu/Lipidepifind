library(shiny)
library(bslib)
library(DT)
library(readxl)
library(writexl)
library(tidyverse)
library(data.table)
library(dtplyr)
library(DBI)
library(RSQLite)
library(diffdf)

source("R/get_metabolite_mz_predictor_v1.R")

dataset1_tooltip <- 
  'We have identified parent lipids from serum, 
and you can use the data we provide, 
or upload your own identified or downloaded parent lipid results from other databases, 
in the template format of "Parent lipids".'

dataset2_tooltip <- 
  'The information for the epi-metabolic reactions that may occur in lipids 
included the reaction type, reaction formula, the change of formula and mass after the reaction, 
and the matching relationship between the lipid structure and reactions.'

dataset3_tooltip <-
  'Please upload differential feature data you detected 
in a high resolution mass spectrometry, 
in the template format of "allfeatures dataset"'

comments <- 
  'Abbreviation: 
FA fatty acid; 
PC phosphatidylcholine; 
LPC lyso-phosphatidylcholine, PE phosphatidylethanolamine; 
LPE lyso- phosphatidylethanolamine; 
PG phosphatidylglycerol; PI phosphatidylinositol; 
PS phosphatidylserine; TG triacylglycerol; 
DG diacylglycerol; 
CE cholesterol ester; SM sphingomyelin; 
Cer ceramide.'

# 定义 Shiny 应用的用户界面
ui <- page_navbar(
  
  # 应用标题
  title = "Lipidepifind",
  
  bg = "#0062cc",
  
  
  # Analysis panel ----------------------------------------------------------
  
  nav_panel(
    title = "Analysis",
    # 输入部分
    page_sidebar(
      sidebar = sidebar(
        
        width = 300,
        
        # 选择是否上传数据集1的选项
        radioButtons("dataset1_option", "Parent lipids Option",
                     choices = c("Use Default" = "default", "Upload Custom" = "custom"),
                     selected = "default") %>% 
          tooltip(dataset1_tooltip),
        
        # 如果用户选择上传自定义数据集1，提供一个上传界面
        conditionalPanel(
          condition = "input.dataset1_option == 'custom'",
          fileInput("file1", "Upload Custom Parent lipids", accept = c(".xlsx"))
        ),
        
        # 内置数据集2
        p("Default EpiReactions") %>% tooltip(dataset2_tooltip),
        downloadButton("download_dataset2","Download EpiReactions") %>% 
          tooltip(dataset2_tooltip),
        
        # 上传数据集3的界面
        fileInput("file3", "Upload Allfeatures", accept = c(".xlsx")) %>% 
          tooltip(dataset3_tooltip),
        
        # 计算按钮
        input_task_button("submit","Submit")
        
      ),
      
      # 输出部分
      # 显示结果的界面
      navset_card_tab(
        full_screen = TRUE,
        nav_panel("Parent lipids",dataTableOutput("dataset1")),
        nav_panel("EpiReactions", dataTableOutput("dataset2")),
        nav_panel("Allfeatures", dataTableOutput("dataset3")),
        nav_panel("Result", 
                  column(3,downloadButton("download_result")),
                  dataTableOutput("result")
                  )
      ),
      p(comments)
      
    )
    
  ),
  
  
  # plot panel --------------------------------------------------------------
  
  nav_panel(
    title = "Epi-reaction enrichment",
    # 输入部分
    page_sidebar(
      sidebar = sidebar(
        
        width = 300,
        
        
        # 选择是否上传数据集1的选项
        radioButtons("result_option", "result Option",
                     choices = c("Analysis result" = "result", "Upload result" = "upload"),
                     selected = "result"),
        
        # 如果用户选择上传自定义数据集1，提供一个上传界面
        conditionalPanel(
          condition = "input.result_option == 'upload'",
          # 上传result的界面
          fileInput("file2", "Upload The result after processing", accept = c(".xlsx"))
        ),
        
        # 计算按钮
        input_task_button("plot_btn","Plot")
        
      ),
      
      # 输出部分
      # 显示结果的界面
      card(
        full_screen = TRUE,
        min_height  = "600px",
        card_body(
          plotOutput("plot")
        )

      ),
      card(
        full_screen = TRUE,
        min_height  = "600px",
        card_body(
          dataTableOutput("table")
        )
        
      )
      
    )
    
  )
  
)




# 定义 Shiny 应用的服务器端逻辑
server <- function(input, output, session) {
  
  rv <- reactiveValues(
    result = NULL,
    result_plot  = NULL
  )
  
  # Analysis panel ----------------------------------------------------------
  
  # 加载数据集1（默认或用户上传）
  dataset1 <- reactive({
    if (input$dataset1_option == "default") {
      # 使用默认的数据集1
      default_path <- "data/Parent lipids.xlsx"
      read_xlsx(default_path) %>% as.data.table()
    } else {
      # 使用用户上传的数据集1
      req(input$file1)
      file_path <- input$file1$datapath
      read_xlsx(file_path) %>% as.data.table()
    }
  })
  
  # 加载数据集2（内设）
  dataset2 <- reactive({
    # 使用内设的数据集2
    default_path <- file.path("data","Epireactions.xlsx")
    read_xlsx(default_path) %>% as.data.table()
  })
  
  # 加载数据集3（用户上传）
  dataset3 <- reactive({
    req(input$file3)
    file_path <- input$file3$datapath
    read_xlsx(file_path) %>% as.data.table()
  })
  
  # 渲染三张表
  output$dataset1 <- renderDataTable({
    req(dataset1())
    dataset1()
  })
  
  output$dataset2 <- renderDataTable({
    req(dataset2())
    datatable(
      dataset2(), 
      options = list(
        autoWidth = TRUE,
        columnDefs = list(
          # list(targets = "_all", width = "100px"), # 设置所有列的默认宽度
          list(targets = 6, width = "500px")
          
        )
      )
    )
  })
  
  output$dataset3 <- renderDataTable({
    req(dataset3())
    dataset3()
  })
  
  # 下载dataset2
  output$download_dataset2 <- downloadHandler(
    filename = function() {
      # Use the selected dataset as the suggested file name
      "EpiReactions.xlsx"
    },
    content = function(file) {
      # Write the dataset to the `file` that will be downloaded
      write_xlsx(dataset2(), file)
    }
  )
  
  # 计算预测的 mz 值
  observeEvent(input$submit, {
    # 获取数据集
    data1 <- dataset1()
    data2 <- dataset2()
    data3 <- dataset3()
    
    # 数据预处理和合并逻辑（根据 code_dt.R 脚本）
    progress <- Progress$new()
    on.exit(progress$close())
    progress$set(message = 'Calculation in progress',
                 detail = 'This may take a while...')
    progress$set(value = 0.5)
    
    result <- get_metabolite_mz_predictor(
      data1,
      data2,
      data3,
      engine = "sqlite"
    )
    
    progress$set(value = 1)
    # 返回结果
    rv$result <- result
  })
  
  # 输出结果
  output$result <- renderDataTable({
    rv$result
  })
  
  # 下载结果
  output$download_result <- downloadHandler(
    filename = "result.xlsx",
    content = function(file) {
      write_xlsx(rv$result, file)
    }
  )
  
  # plot panel --------------------------------------------------------------
  
  # 加载result（默认result或用户上传）
  observe({
    if (input$result_option == "result") {
      # 使用默认的数据集1
      rv$result_plot <- rv$result
    } else {
      # 使用用户上传的数据集1
      req(input$file2)
      file_path <- input$file2$datapath
      rv$result_plot <- read_xlsx(file_path) %>% as.data.table()
    }
  })
  
  x_df <- read_excel("data/各代谢反应鉴定到的脂质代谢产物数量（x值）.xlsx")
  
  observeEvent(input$plot_btn,{
    
    if (is.null(rv$result_plot)){
      showModal(modalDialog("You must get analysis result or upload result!"))
    }
    req(rv$result_plot)
    result <- rv$result_plot
    p_value_df <- result %>% 
      count(Reaction) %>% 
      arrange(n) %>% 
      inner_join(x_df, by = "Reaction") %>% 
      mutate(
        p_value = 1 - phyper(n - 1, nrow(result), 3473, 174),
        log10_p_value = -log10(p_value),
        log10_p_value = if_else(is.infinite(log10_p_value),-1,log10_p_value)
        
      )
    
    output$plot <- renderPlot({
      # ggplot(p_value_df, aes(n, Reaction, color = log10_p_value)) +
      #   geom_point() +
      #   labs(x = "Count", y = "Reaction", color = "-LOG10(Pvalue)")
      
      ggplot(p_value_df, aes(n, Reaction, color = log10_p_value)) +
        geom_point() +
        labs(x = "Count", y = "Reaction", color = "-LOG10(Pvalue)") +
        scale_color_gradient(low = "blue", high = "red", 
                             limits = c(min(p_value_df$log10_p_value), 
                                        max(p_value_df$log10_p_value)))
      
    })
    
    output$table <- renderDataTable({
      p_value_df %>% 
        inner_join(dataset2() %>% select(Reaction,`Enzyme/target`), by = "Reaction") %>% 
        transmute(
          Reaction,
          Total = x,
          Hit = n,
          `P-value` = p_value,
          `Enzyme/target`
        )
    })
    
  })
  
}


shinyApp(ui, server)
