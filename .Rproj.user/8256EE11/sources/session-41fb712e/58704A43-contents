# 加载???
library(readxl)
library(writexl)
library(tidyverse)
library(data.table)
library(dtplyr)
library(DBI)
library(RSQLite)
library(diffdf)

# 加载数据
data1 <- read_xlsx("Parent lipids.xlsx") %>% as.data.table()
data2 <- read_xlsx("EpiReactions.xlsx") %>% as.data.table()
data3 <- read_xlsx("Allfeatures dataset.xlsx") %>% as.data.table()

# 设置addcution
addcution1 <- data.table(
  Addcution = c(NA, "+NH4", "+H", "-H", "+COOH"),
  AdductMZ = c(0, 18.0319, 1.0078, -1.0078, 44.9976)
)


data2 <- data2 %>%
  # 将数据集2中的加号改为TRUE方便后续筛???
  mutate(across(6:26, ~ . == "+")) %>% 
  # 将Mass Difference设置为数字格???
  mutate(`Mass Difference (Da)` = as.numeric(`Mass Difference (Da)`))

# 设置add
# 目的是先多对多合并后再筛选符合条件的数据
data1$add <- 1
addcution1$add <- 1
data2$add <- 1
data3$add <- 1

# 数据1和addcution多对多合???
data1 <- data1 %>% left_join(addcution1, by = "add",multiple = "all")

# 将数???1分为3种，第一种是Double bond小于2考虑compound
# 第二种Double bond大于等于2
# 第三种Double bond大于等于3
data1_1 <- data1 %>% filter(`Double bond FA1` < 2)
data1_2 <- data1 %>% filter(`Double bond FA1` >= 2)
data1_3 <- data1 %>% filter(`Double bond FA1` >= 3)



# 对于第一种需要根据每种compound分别合并数据???2中应该加的行
class1 <- unique(data1_1$Class)
a_list <- lapply(seq_along(class1),function(i){
  temp1 <- data1_1 %>% filter(Class == class1[i])
  temp2 <- data2 %>% filter(!!sym(class1[i]) == TRUE)
  
  temp1 %>%
    left_join(temp2, by = "add",multiple = "all") %>%
    select(Compound, `Molecule weight`, Addcution, AdductMZ, `Mass Difference (Da)`, Reaction) %>%
    mutate(mz = `Molecule weight` + AdductMZ + `Mass Difference (Da)`)
})
# 合并结果生成a_list列表，如??? a_list[[1]] 可以查看compound为FA合并的结果，其中生成的mz就是预测mz
a <- rbindlist(a_list)

# 对于第二种需要根据Double bond分别合并数据???2中应该加的行
temp_b <- data2 %>% filter(`Double bond>=2` == TRUE)
b <- data1_2 %>%
  left_join(temp_b, by = "add",multiple = "all") %>%
  select(Compound, `Molecule weight`, Addcution, AdductMZ, `Mass Difference (Da)`, Reaction) %>%
  mutate(mz = `Molecule weight` + AdductMZ + `Mass Difference (Da)`)
# 合并结果生成b数据集，如用 b 可以查看Double bond>=2合并的结果，其中生成的mz就是预测mz

# 对于第三种需要根据Double bond分别合并数据???2中应该加的行
temp_c <- data2 %>% filter(`Double bond>=3` == TRUE)
c <- data1_3 %>%
  left_join(temp_c, by = "add",multiple = "all") %>%
  select(Compound, `Molecule weight`, Addcution, AdductMZ, `Mass Difference (Da)`, Reaction) %>%
  mutate(mz = `Molecule weight` + AdductMZ + `Mass Difference (Da)`)

# 将a, b, c合并为数据集all
all <- rbind(a,b, c)
# 此时all为所有数据集1，addcution,数据???2的可能结???

# 删除无用数据
rm(temp_b)
rm(temp_c)
rm(a)
rm(b)
rm(c)

# 下面用all 和数据集3合并
# 若直接使用多对多将导致数据量过大，达???2亿多条???
# 因此在合并前先进行第一步筛???
# 只有预测mz和数据集3中的m/z相差???1以内??? all数据会被合并
all$add <- 1


# 方法一：lapply data.table ----------------------------------------------------

system.time({
  all_2_list <- lapply(1:nrow(data3), function(j){
    temp_all1 <- data3[j,]
    temp_value <- temp_all1$`m/z`
    # 此处设置初步筛选条件，只有预测mz和数据集3中的m/z相差???1以内??? all数据会被合并
    temp_all2 <- all %>%
      filter(abs(mz - temp_value) <=1)
    temp_all3 <- merge(temp_all2,temp_all1,by="add")
    print(paste0(j,": ",nrow(temp_all3)))
    temp_all3
  })
  all_2 <- rbindlist(all_2_list)
})
# 用户  系统  流??? 
# 36.81  5.37 43.78 

# 合并all_2列表中的所有数???
all_2 <- rbindlist(all_2_list)


# 方法二：使用SQLite数据库条件连??? ---------------------------------------------
# 创建一个临时SQLite数据库连???
con <- dbConnect(RSQLite::SQLite(), ":memory:")

# 将数据表加载到SQLite数据库中
dbWriteTable(con, "all", all, row.names = FALSE)
dbWriteTable(con, "data3", data3, row.names = FALSE)

# 编写SQL合并查询
query <- '
SELECT a.*, b.*
FROM [all] a
JOIN data3 b ON a.[add] = b.[add]
WHERE abs(a.mz - b.`m/z`) <= 1
'

# 执行SQL查询
system.time({
  result <- dbGetQuery(con, query)
  result <- result[,-length(result)] %>% as.data.table()
})
# 用户  系统  流??? 
# 24.11  0.08 24.22

# 关闭数据库连???
dbDisconnect(con)



# compare 方法一和方法二的结??? -------------------------------------------------

diffdf(
  all_2 %>% arrange_at(names(all_2)),
  result %>% arrange_at(names(all_2))
)
# No issues were found!

# 导出最终数??? -----------------------------------------------------------------

# 对初步筛选后的数据计??? 绝对值ppm，并选择保留ppm小于等于10的数???
all_3 <- all_2 %>%
  mutate(ppm=abs((mz-`m/z`)/`m/z`)*10^6)%>%
  # 修改下一行设置就可以改变ppm要求，如改为5则变成ppm小于等于5
  filter(ppm<=10)%>%
  select(Compound,`m/z`,Reaction,`Retention time [min]`,Area,Addcution,ppm)

# 导出最终数???
write_xlsx(all_3,"result.xlsx")

